// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abicky/pd-shift/internal/pd (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package mock -destination mocks.go github.com/abicky/pd-shift/internal/pd Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pagerduty "github.com/PagerDuty/go-pagerduty"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetScheduleWithContext mocks base method.
func (m *MockClient) GetScheduleWithContext(ctx context.Context, id string, o pagerduty.GetScheduleOptions) (*pagerduty.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleWithContext", ctx, id, o)
	ret0, _ := ret[0].(*pagerduty.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleWithContext indicates an expected call of GetScheduleWithContext.
func (mr *MockClientMockRecorder) GetScheduleWithContext(ctx, id, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleWithContext", reflect.TypeOf((*MockClient)(nil).GetScheduleWithContext), ctx, id, o)
}
